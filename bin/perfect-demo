#!/usr/bin/env bash

set -e

main() {
  if [[ $# -eq 1 ]]; then
    cat "$1" | run
  else
    run
  fi
}

run() {
  local started=false say_pid=
  local bash=() command=() message=() prev=

  while IFS= read -r line; do
    if [[ $line =~ ^$ ]]; then
      all-and-run
    elif [[ $line =~ ^\\\  ]]; then
      bash+=("${line#\\\ }")
      all-and-run bash
    elif [[ $line =~ ^\$\  ]]; then
      command+=("${line#\$\ }")
      all-and-run command
    elif [[ $line =~ ^#\  ]]; then
      message+=("${line#\#\ }")
      all-and-run message
    elif [[ $line =~ ^\$#\  ]]; then
      line="${line#\$\#\ }"
      command+=("# $line")
      message+=("$line")
      all-and-run command-message
    else
      echo "Invalid demo command line: '$line'"
      exit 1;
    fi
  done
  all-and-run

  _wait
  echo
}

all-and-run() {
  local action="$1"
  if [[ -z $prev ]]; then
    prev="$action"
    return
  fi
  if [[ $action == $prev ]]; then
    return
  fi
  if [[ $prev == bash ]]; then
    for b in "${bash[@]}"; do
      eval "$b"
    done
    bash=()
  elif [[ $prev == command ]]; then
    for c in "${command[@]}"; do
      type-and-run "$c"
    done
    command=()
    _pause
  elif [[ $prev == message ]]; then
    for m in "${message[@]}"; do
      _say "$m"
    done
    message=()
    _pause
  elif [[ $prev == command-message ]]; then
    m="${message[@]}"
    _say "$m"
    message=()
    for c in "${command[@]}"; do
      type-and-run "$c"
    done
    command=()
    _pause
  fi
  prev="$action"
}

type-and-run() {
  local rate="${PERFECT_DEMO_RATE:-200}"
  sleep_type=$(bc <<<"scale = 5; 8 / $rate")
  sleep_space=$(bc <<<"scale = 5; $sleep_type * 2")
  line="$1"
  _pause-at-intro
  for (( i = 0; i < ${#line}; i++ )); do
    c="${line:$i:1}"
    printf "$c"
    if [[ $c == ' ' ]]; then
      sleep $sleep_space
    else
      sleep $sleep_type
    fi
  done

  sleep 0.25
  echo
  eval "$line"
  _prompt
}

_say() {
  local voice="${PERFECT_DEMO_VOICE:-Daniel}"
  local rate="${PERFECT_DEMO_RATE:-200}"
  local message="$1"
  _pause-at-intro
  if [[ -n $message ]]; then
    if [[ -n $say_pid ]]; then
      wait $say_pid
      say_pid=
    fi
    say -r "$rate" -v "$voice" "$message" &
    say_pid=$!
    message=
  fi
}

_pause-at-intro() {
  if ! $started; then
    clear
    _prompt
    _wait
    started=true
  fi
}

_prompt() {
  printf "${PERFECT_DEMO_PROMPT:-Perfect Demo > }"
  if [[ -n $say_pid ]]; then
    wait $say_pid
    say_pid=
    _pause
  fi
}

_wait() {
  sleep "${1:-${PERFECT_DEMO_WAIT:-3}}"
}

_pause() {
  sleep "${1:-${PERFECT_DEMO_PAUSE:-1}}"
}

c() {
  clear
  _prompt
}

die() {
  echo "$@" >&2
  exit 1
}

if ! `type say &>/dev/null`; then
  say() { :; }
fi

[[ $0 != $BASH_SOURCE ]] || main "$@"

# vim: set ft=sh lisp:
